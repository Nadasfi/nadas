version: '3.8'

services:
  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nadas-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
    env_file:
      - .env.${ENVIRONMENT:-development}
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./media:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nadas-network
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nadas-celery-worker
    restart: unless-stopped
    command: celery -A celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
    env_file:
      - .env.${ENVIRONMENT:-development}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - db
    networks:
      - nadas-network
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nadas-celery-beat
    restart: unless-stopped
    command: celery -A celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
    env_file:
      - .env.${ENVIRONMENT:-development}
    volumes:
      - ./logs:/app/logs
      - celery-beat-data:/app/celerybeat-schedule
    depends_on:
      - redis
      - db
    networks:
      - nadas-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: nadas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nadas_${ENVIRONMENT:-development}
      POSTGRES_USER: nadas
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-nadas123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - nadas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nadas -d nadas_${ENVIRONMENT:-development}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: nadas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - nadas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: nadas-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
      - ./media:/var/www/media:ro
    depends_on:
      - api
    networks:
      - nadas-network
    profiles:
      - production

  # Prometheus Monitoring (Production)
  prometheus:
    image: prom/prometheus:latest
    container_name: nadas-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nadas-network
    profiles:
      - monitoring

  # Grafana Dashboard (Production)
  grafana:
    image: grafana/grafana:latest
    container_name: nadas-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - nadas-network
    profiles:
      - monitoring

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  celery-beat-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  nadas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16